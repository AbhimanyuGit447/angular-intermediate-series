{"ast":null,"code":"import { selectAllTasks, selectIcompleteTasksCount } from './task-store/task.selectors';\nimport { addTask, removeTask, toggleTaskCompletion } from './task-store/task.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction AppComponent_li_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵelement(1, \"input\", 3);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", task_r1.completed);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r1.description);\n  }\n}\nexport class AppComponent {\n  constructor(store) {\n    this.store = store;\n    this.newTaskDescription = '';\n    this.allTasks$ = this.store.select(selectAllTasks);\n    this.incompleteTasksCount$ = this.store.select(selectIcompleteTasksCount);\n  }\n  addTask() {\n    const newTask = {\n      id: Date.now().toString(),\n      description: this.newTaskDescription,\n      completed: false\n    };\n    this.store.dispatch(addTask({\n      task: newTask\n    }));\n    this.newTaskDescription = '';\n  }\n  removeTask(taskId) {\n    this.store.dispatch(removeTask({\n      taskId\n    }));\n  }\n  toggleCompletion(taskId) {\n    this.store.dispatch(toggleTaskCompletion({\n      taskId\n    }));\n  }\n  static {\n    this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.Store));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      decls: 11,\n      vars: 7,\n      consts: [[\"type\", \"text\", \"placeholder\", \"add a task\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"checkbox\", \"chan\", \"\", 3, \"checked\"]],\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h1\");\n          i0.ɵɵtext(1, \"NgRx task list\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"p\");\n          i0.ɵɵtext(3);\n          i0.ɵɵpipe(4, \"async\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"input\", 0);\n          i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_5_listener($event) {\n            return ctx.newTaskDescription = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"button\", 1);\n          i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_6_listener() {\n            return ctx.addTask();\n          });\n          i0.ɵɵtext(7, \"Add Task\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"ul\");\n          i0.ɵɵtemplate(9, AppComponent_li_9_Template, 4, 2, \"li\", 2);\n          i0.ɵɵpipe(10, \"async\");\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\"Incomplete tasks : \", i0.ɵɵpipeBind1(4, 3, ctx.incompleteTasksCount$), \"\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngModel\", ctx.newTaskDescription);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(10, 5, ctx.allTasks$));\n        }\n      },\n      dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i2.AsyncPipe],\n      styles: [\".dynamic-form[_ngcontent-%COMP%] {\\n  padding: 2rem;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBQTtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLmR5bmFtaWMtZm9ybXtcbiAgICBwYWRkaW5nOiAycmVtO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"names":["selectAllTasks","selectIcompleteTasksCount","addTask","removeTask","toggleTaskCompletion","i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","task_r1","completed","ɵɵtextInterpolate","description","AppComponent","constructor","store","newTaskDescription","allTasks$","select","incompleteTasksCount$","newTask","id","Date","now","toString","dispatch","task","taskId","toggleCompletion","ɵɵdirectiveInject","i1","Store","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵlistener","AppComponent_Template_input_ngModelChange_5_listener","$event","AppComponent_Template_button_click_6_listener","ɵɵtemplate","AppComponent_li_9_Template","ɵɵtextInterpolate1","ɵɵpipeBind1"],"sources":["/Users/abhimanyusinghshaktawat/Desktop/advanced-component-demo/Week-3-State-Management-NgRx-Basics/video-7-State-Management-RxJs-Ngrx-Intro/src/app/app.component.ts","/Users/abhimanyusinghshaktawat/Desktop/advanced-component-demo/Week-3-State-Management-NgRx-Basics/video-7-State-Management-RxJs-Ngrx-Intro/src/app/app.component.html"],"sourcesContent":["import { AfterViewInit, Component, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\nimport { NotificationService } from './services/notification.service';\nimport { SurveyServiceService } from './services/survey-service.service';\nimport { Observable } from 'rxjs';\nimport { Task } from './models/task.model';\nimport { Store } from '@ngrx/store';\nimport { selectAllTasks, selectIcompleteTasksCount } from './task-store/task.selectors';\nimport { addTask, removeTask, toggleTaskCompletion } from './task-store/task.actions';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  newTaskDescription = '';\n  \n  allTasks$ : Observable<Task[]>;\n  incompleteTasksCount$ : Observable<number>;\n\n  constructor(private store : Store){\n    this.allTasks$ = this.store.select(selectAllTasks);\n    this.incompleteTasksCount$ = this.store.select(selectIcompleteTasksCount);\n  }\n\n  addTask(){\n    const newTask : Task = {\n      id : Date.now().toString(),\n      description : this.newTaskDescription,\n      completed : false\n    }\n    this.store.dispatch(addTask({task : newTask}));\n    this.newTaskDescription = '';\n  }\n\n  removeTask(taskId : string){\n    this.store.dispatch(removeTask({taskId}));\n  }\n\n  toggleCompletion(taskId : string){\n    this.store.dispatch(toggleTaskCompletion({taskId}))\n  }\n\n}\n\n\n","<!-- \n\n<button (click)=\"loadTextQuestion()\"  >Load text Question</button>\n<button (click)=\"loadMultipleChoice()\">Load Multiple Choice</button>\n<button (click)=\"loadDropdown()\">Load Dropdown</button>\n\n<ng-template #surveyContainer></ng-template> -->\n\n<!-- <app-signup></app-signup> -->\n\n    <!-- <div class=\"dynamic-form\">\n        <app-dynamic-form></app-dynamic-form>\n    </div> -->\n\n    <!-- <div class=\"dynamic-form\">\n        <app-registration-form></app-registration-form>\n    </div> -->\n  \n\n\n\n\n<!-- <app-notification></app-notification>\n\n<app-task></app-task>\n\n<app-parent></app-parent>\n\n<app-sibling></app-sibling> -->\n\n\n<h1>NgRx task list</h1>\n<p>Incomplete tasks : {{incompleteTasksCount$ | async}}</p>\n\n<input type=\"text\" [(ngModel)]=\"newTaskDescription\" placeholder=\"add a task\">\n<button (click)=\"addTask()\" >Add Task</button>\n\n<ul>\n    <li *ngFor=\"let task of  (allTasks$ | async) \">\n        <input type=\"checkbox\" [checked]=\"task.completed\" chan >\n       <span>{{task.description}}</span>\n    </li>\n</ul>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}