{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { selectAllTasks, selectIcompleteTasksCount } from './task-store/task.selectors';\nimport { addTask, removeTask, toggleTaskCompletion } from './task-store/task.actions';\nimport { selectIsAuthenticated, selectUsername } from './auth/auth.selectors';\nimport { login, logout } from './auth/auth.actions';\nexport let AppComponent = class AppComponent {\n  constructor(store) {\n    this.store = store;\n    this.newTaskDescription = '';\n    this.allTasks$ = this.store.select(selectAllTasks);\n    this.incompleteTasksCount$ = this.store.select(selectIcompleteTasksCount);\n    this.isAuthenticated$ = this.store.select(selectIsAuthenticated);\n    this.username$ = this.store.select(selectUsername);\n  }\n  loginUser() {\n    const name = prompt(\"Enter your username : \");\n    if (name) {\n      this.store.dispatch(login({\n        username: name.trim()\n      }));\n    }\n  }\n  logoutUser() {\n    this.store.dispatch(logout());\n  }\n  addTask() {\n    const newTask = {\n      id: Date.now().toString(),\n      description: this.newTaskDescription,\n      completed: false\n    };\n    this.store.dispatch(addTask({\n      task: newTask\n    }));\n    this.newTaskDescription = '';\n  }\n  removeTask(taskId) {\n    this.store.dispatch(removeTask({\n      taskId\n    }));\n  }\n  toggleCompletion(taskId) {\n    this.store.dispatch(toggleTaskCompletion({\n      taskId\n    }));\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})], AppComponent);","map":{"version":3,"names":["Component","selectAllTasks","selectIcompleteTasksCount","addTask","removeTask","toggleTaskCompletion","selectIsAuthenticated","selectUsername","login","logout","AppComponent","constructor","store","newTaskDescription","allTasks$","select","incompleteTasksCount$","isAuthenticated$","username$","loginUser","name","prompt","dispatch","username","trim","logoutUser","newTask","id","Date","now","toString","description","completed","task","taskId","toggleCompletion","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/abhimanyusinghshaktawat/Desktop/advanced-component-demo/Week-3-State-Management-NgRx-Basics/video-8-NgRx-Auth-login-logout/src/app/app.component.ts"],"sourcesContent":["import { AfterViewInit, Component, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\nimport { NotificationService } from './services/notification.service';\nimport { SurveyServiceService } from './services/survey-service.service';\nimport { Observable } from 'rxjs';\nimport { Task } from './models/task.model';\nimport { Store } from '@ngrx/store';\nimport { selectAllTasks, selectIcompleteTasksCount } from './task-store/task.selectors';\nimport { addTask, removeTask, toggleTaskCompletion } from './task-store/task.actions';\nimport { AppState } from './app.state';\nimport { selectIsAuthenticated, selectUsername } from './auth/auth.selectors';\nimport { login, logout } from './auth/auth.actions';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  newTaskDescription = '';\n  \n  allTasks$ : Observable<Task[]>;\n  incompleteTasksCount$ : Observable<number>;\n\n  isAuthenticated$!  : Observable<boolean>;\n  username$! : Observable<string | null>;\n  \n\n  constructor(private store : Store<AppState>){\n    this.allTasks$ = this.store.select(selectAllTasks);\n    this.incompleteTasksCount$ = this.store.select(selectIcompleteTasksCount);\n\n    this.isAuthenticated$ = this.store.select(selectIsAuthenticated);\n    this.username$ = this.store.select(selectUsername);\n  }\n\n\n  loginUser(){\n    const name = prompt(\"Enter your username : \")\n    if(name){\n      this.store.dispatch(login({username : name.trim()}));\n    }\n  }\n\n  logoutUser(){\n    this.store.dispatch(logout());\n  }\n\n  addTask(){\n    const newTask : Task = {\n      id : Date.now().toString(),\n      description : this.newTaskDescription,\n      completed : false\n    }\n    this.store.dispatch(addTask({task : newTask}));\n    this.newTaskDescription = '';\n  }\n\n  removeTask(taskId : string){\n    this.store.dispatch(removeTask({taskId}));\n  }\n\n  toggleCompletion(taskId : string){\n    this.store.dispatch(toggleTaskCompletion({taskId}))\n  }\n\n}\n\n\n"],"mappings":";AAAA,SAAwBA,SAAS,QAA6C,eAAe;AAM7F,SAASC,cAAc,EAAEC,yBAAyB,QAAQ,6BAA6B;AACvF,SAASC,OAAO,EAAEC,UAAU,EAAEC,oBAAoB,QAAQ,2BAA2B;AAErF,SAASC,qBAAqB,EAAEC,cAAc,QAAQ,uBAAuB;AAC7E,SAASC,KAAK,EAAEC,MAAM,QAAQ,qBAAqB;AAO5C,WAAMC,YAAY,GAAlB,MAAMA,YAAY;EAWvBC,YAAoBC,KAAuB;IAAvB,KAAAA,KAAK,GAALA,KAAK;IATzB,KAAAC,kBAAkB,GAAG,EAAE;IAUrB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACF,KAAK,CAACG,MAAM,CAACd,cAAc,CAAC;IAClD,IAAI,CAACe,qBAAqB,GAAG,IAAI,CAACJ,KAAK,CAACG,MAAM,CAACb,yBAAyB,CAAC;IAEzE,IAAI,CAACe,gBAAgB,GAAG,IAAI,CAACL,KAAK,CAACG,MAAM,CAACT,qBAAqB,CAAC;IAChE,IAAI,CAACY,SAAS,GAAG,IAAI,CAACN,KAAK,CAACG,MAAM,CAACR,cAAc,CAAC;EACpD;EAGAY,SAASA,CAAA;IACP,MAAMC,IAAI,GAAGC,MAAM,CAAC,wBAAwB,CAAC;IAC7C,IAAGD,IAAI,EAAC;MACN,IAAI,CAACR,KAAK,CAACU,QAAQ,CAACd,KAAK,CAAC;QAACe,QAAQ,EAAGH,IAAI,CAACI,IAAI;MAAE,CAAC,CAAC,CAAC;;EAExD;EAEAC,UAAUA,CAAA;IACR,IAAI,CAACb,KAAK,CAACU,QAAQ,CAACb,MAAM,EAAE,CAAC;EAC/B;EAEAN,OAAOA,CAAA;IACL,MAAMuB,OAAO,GAAU;MACrBC,EAAE,EAAGC,IAAI,CAACC,GAAG,EAAE,CAACC,QAAQ,EAAE;MAC1BC,WAAW,EAAG,IAAI,CAAClB,kBAAkB;MACrCmB,SAAS,EAAG;KACb;IACD,IAAI,CAACpB,KAAK,CAACU,QAAQ,CAACnB,OAAO,CAAC;MAAC8B,IAAI,EAAGP;IAAO,CAAC,CAAC,CAAC;IAC9C,IAAI,CAACb,kBAAkB,GAAG,EAAE;EAC9B;EAEAT,UAAUA,CAAC8B,MAAe;IACxB,IAAI,CAACtB,KAAK,CAACU,QAAQ,CAAClB,UAAU,CAAC;MAAC8B;IAAM,CAAC,CAAC,CAAC;EAC3C;EAEAC,gBAAgBA,CAACD,MAAe;IAC9B,IAAI,CAACtB,KAAK,CAACU,QAAQ,CAACjB,oBAAoB,CAAC;MAAC6B;IAAM,CAAC,CAAC,CAAC;EACrD;CAED;AAjDYxB,YAAY,GAAA0B,UAAA,EALxBpC,SAAS,CAAC;EACTqC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,C,EACW7B,YAAY,CAiDxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}